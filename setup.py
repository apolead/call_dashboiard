#!/usr/bin/env python3
"""
ApoLead Call Analytics System - Setup and Configuration Tool
Automates the initial setup process for the transcription system.
"""

import os
import shutil
import sys
from pathlib import Path
from dotenv import load_dotenv

# ANSI color codes for terminal output
class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'

def print_colored(text, color=Colors.ENDC):
    """Print colored text to terminal."""
    print(f"{color}{text}{Colors.ENDC}")

def print_header(text):
    """Print a header with styling."""
    print("\n" + "=" * 80)
    print_colored(f"🎯 {text}", Colors.BOLD + Colors.HEADER)
    print("=" * 80)

def print_step(step_num, total_steps, description):
    """Print a step with progress indicator."""
    progress = f"[{step_num}/{total_steps}]"
    print_colored(f"{progress} {description}...", Colors.OKBLUE)

def print_success(message):
    """Print success message."""
    print_colored(f"✅ {message}", Colors.OKGREEN)

def print_warning(message):
    """Print warning message."""
    print_colored(f"⚠️  {message}", Colors.WARNING)

def print_error(message):
    """Print error message."""
    print_colored(f"❌ {message}", Colors.FAIL)

def print_info(message):
    """Print info message."""
    print_colored(f"ℹ️  {message}", Colors.OKCYAN)

def get_user_input(prompt, default=None, required=True):
    """Get user input with optional default value."""
    if default:
        full_prompt = f"{prompt} [{default}]: "
    else:
        full_prompt = f"{prompt}: "
    
    while True:
        value = input(full_prompt).strip()
        
        if value:
            return value
        elif default:
            return default
        elif not required:
            return ""
        else:
            print_error("This field is required. Please enter a value.")

def create_env_file():
    """Create .env file with user input."""
    print_header("ENVIRONMENT CONFIGURATION")
    
    env_file = Path(".env")
    if env_file.exists():
        print_warning(".env file already exists!")
        overwrite = input("Do you want to overwrite it? (y/N): ").lower().strip()
        if overwrite != 'y':
            print_info("Keeping existing .env file")
            return True
    
    print_info("Please provide your API credentials and configuration:")
    print()
    
    # Collect API credentials
    print_colored("📡 API Credentials:", Colors.BOLD)
    deepgram_key = get_user_input("Deepgram API Key")
    openai_key = get_user_input("OpenAI API Key")
    print()
    
    # Collect AWS credentials
    print_colored("☁️  AWS S3 Configuration:", Colors.BOLD)
    aws_access_key = get_user_input("AWS Access Key ID")
    aws_secret_key = get_user_input("AWS Secret Access Key")
    s3_bucket = get_user_input("S3 Bucket Name")
    s3_region = get_user_input("AWS Region", default="us-east-1")
    print()
    
    # Optional settings
    print_colored("⚙️  Optional Settings:", Colors.BOLD)
    company_name = get_user_input("Company Name", default="ApoLead", required=False)
    primary_color = get_user_input("Primary Color (hex)", default="#1e40af", required=False)
    processing_days = get_user_input("Processing Days Lookback", default="7", required=False)
    openai_model = get_user_input("OpenAI Model", default="gpt-4o-mini", required=False)
    
    # Create .env content
    env_content = f"""# ApoLead Call Analytics System Configuration
# Generated by setup script

# =================================
# API KEYS (REQUIRED)
# =================================
DEEPGRAM_API_KEY={deepgram_key}
OPENAI_API_KEY={openai_key}

# =================================
# AWS S3 CONFIGURATION (REQUIRED)
# =================================
AWS_ACCESS_KEY_ID={aws_access_key}
AWS_SECRET_ACCESS_KEY={aws_secret_key}
S3_BUCKET_NAME={s3_bucket}
S3_REGION={s3_region}

# =================================
# OPTIONAL SETTINGS
# =================================
COMPANY_NAME={company_name}
PRIMARY_COLOR={primary_color}
PROCESSING_DAYS_LOOKBACK={processing_days}
OPENAI_MODEL={openai_model}

# =================================
# DEFAULT PATHS (Usually don't need to change)
# =================================
# AUDIO_DIR=./data/audio
# PROCESSED_DIR=./data/processed
# CSV_FILE=./data/call_transcriptions.csv
# LOG_LEVEL=INFO
"""
    
    # Write .env file
    try:
        with open(env_file, 'w') as f:
            f.write(env_content)
        print_success(".env file created successfully!")
        return True
    except Exception as e:
        print_error(f"Failed to create .env file: {str(e)}")
        return False

def install_dependencies():
    """Install Python dependencies."""
    print_header("DEPENDENCY INSTALLATION")
    
    print_step(1, 2, "Checking if pip is available")
    try:
        import subprocess
        result = subprocess.run([sys.executable, "-m", "pip", "--version"], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print_success("pip is available")
        else:
            print_error("pip is not available")
            return False
    except Exception as e:
        print_error(f"Error checking pip: {str(e)}")
        return False
    
    print_step(2, 2, "Installing required packages")
    try:
        # Install packages from requirements.txt
        result = subprocess.run([
            sys.executable, "-m", "pip", "install", "-r", "requirements.txt"
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print_success("All dependencies installed successfully!")
            return True
        else:
            print_error("Failed to install dependencies")
            print_error(result.stderr)
            return False
    except Exception as e:
        print_error(f"Error installing dependencies: {str(e)}")
        return False

def create_directories():
    """Create necessary directories."""
    print_header("DIRECTORY SETUP")
    
    directories = [
        Path("data/audio"),
        Path("data/processed"), 
        Path("logs"),
        Path("static/img")
    ]
    
    for i, directory in enumerate(directories, 1):
        print_step(i, len(directories), f"Creating {directory}")
        try:
            directory.mkdir(parents=True, exist_ok=True)
            print_success(f"Directory ready: {directory}")
        except Exception as e:
            print_error(f"Failed to create {directory}: {str(e)}")
            return False
    
    return True

def test_configuration():
    """Test the configuration."""
    print_header("CONFIGURATION TEST")
    
    print_step(1, 3, "Loading environment configuration")
    try:
        load_dotenv()
        print_success("Environment loaded successfully")
    except Exception as e:
        print_error(f"Failed to load environment: {str(e)}")
        return False
    
    print_step(2, 3, "Testing API key formats")
    
    # Test OpenAI key format
    openai_key = os.getenv('OPENAI_API_KEY', '')
    if openai_key.startswith('sk-'):
        print_success("OpenAI API key format looks correct")
    else:
        print_warning("OpenAI API key format may be incorrect (should start with 'sk-')")
    
    # Test Deepgram key
    deepgram_key = os.getenv('DEEPGRAM_API_KEY', '')
    if len(deepgram_key) > 20:
        print_success("Deepgram API key format looks correct")
    else:
        print_warning("Deepgram API key format may be incorrect")
    
    print_step(3, 3, "Checking AWS configuration")
    aws_keys = ['AWS_ACCESS_KEY_ID', 'AWS_SECRET_ACCESS_KEY', 'S3_BUCKET_NAME']
    all_aws_configured = True
    
    for key in aws_keys:
        value = os.getenv(key, '')
        if value and not value.startswith('your_'):
            print_success(f"{key} configured")
        else:
            print_warning(f"{key} not properly configured")
            all_aws_configured = False
    
    if all_aws_configured:
        print_success("AWS configuration looks complete")
    
    return True

def display_next_steps():
    """Display next steps for the user."""
    print_header("SETUP COMPLETE")
    
    print_colored("🎉 Setup completed successfully!", Colors.BOLD + Colors.OKGREEN)
    print()
    print_colored("📋 Next Steps:", Colors.BOLD)
    print_colored("   1. Run the system:", Colors.OKCYAN)
    print_colored("      python start.py", Colors.BOLD)
    print()
    print_colored("   2. Access the dashboard:", Colors.OKCYAN)
    print_colored("      http://localhost:5000", Colors.BOLD)
    print()
    print_colored("   3. Add audio files to:", Colors.OKCYAN)
    print_colored("      data/audio/", Colors.BOLD)
    print()
    print_colored("🔧 Configuration Files:", Colors.BOLD)
    print_colored("   • .env - Your API keys and settings", Colors.OKCYAN)
    print_colored("   • requirements.txt - Python dependencies", Colors.OKCYAN)
    print_colored("   • data/ - Audio files and results", Colors.OKCYAN)
    print()
    print_colored("📞 Support:", Colors.BOLD)
    print_colored("   If you encounter issues, check the logs/ directory", Colors.OKCYAN)
    print("=" * 80)

def main():
    """Main setup function."""
    print_colored("🎵 ApoLead Call Analytics System", Colors.BOLD + Colors.HEADER)
    print_colored("   Automated Setup & Configuration Tool", Colors.HEADER)
    print()
    
    print_info("This setup wizard will help you configure the system step by step.")
    print()
    
    # Check if we're in the right directory
    if not Path("requirements.txt").exists():
        print_error("requirements.txt not found. Please run this script from the project directory.")
        sys.exit(1)
    
    # Step 1: Create environment file
    if not create_env_file():
        print_error("Environment setup failed. Please fix the issues and try again.")
        sys.exit(1)
    
    # Step 2: Install dependencies
    if not install_dependencies():
        print_error("Dependency installation failed. Please fix the issues and try again.")
        sys.exit(1)
    
    # Step 3: Create directories
    if not create_directories():
        print_error("Directory creation failed. Please fix the issues and try again.")
        sys.exit(1)
    
    # Step 4: Test configuration
    if not test_configuration():
        print_error("Configuration test failed. Please review your settings.")
        sys.exit(1)
    
    # Display next steps
    display_next_steps()

if __name__ == "__main__":
    main()